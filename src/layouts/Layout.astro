---
import Background from "@/components/Background.astro";
import Github from "@/icons/Github.astro";
import Command from "@/icons/Command.astro";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <Background />
    <wc-toast></wc-toast>
    <ninja-keys class="dark" hideBreadcrumbs></ninja-keys>
    <nav class="flex flex-row items-center justify-between py-8 m-auto w-3/4">
      <div>
        <a href="/" class="text-2xl font-semibold">Tinyify</a>
      </div>
      <div class="flex flex-row gap-3 items-center justify-center">
        {
          Astro.cookies.has("session") ? (
            <button
              class="font-semibold hover:text-gray-400 transition"
              id="sign-out"
            >
              Sign Out
            </button>
          ) : (
            <button
              class="font-semibold hover:text-gray-400 transition"
              id="google-sign-in"
            >
              Sign In
            </button>
          )
        }
        <button
          class="hover:text-gray-400 hover:scale-110 transition"
          id="command-btn"
        >
          <Command />
        </button>
        <a
          href="https://github.com/SantiMit1/tinyify"
          target="_blank"
          rel="noopener noreferrer"
          class="hover:text-gray-400 hover:scale-110 transition"
          aria-label="Github repo"
        >
          <Github />
        </a>
      </div>
    </nav>
    <slot />
  </body>
</html>
<style is:global>
  body {
    color: white;
    font-family: "Inter", sans-serif;
  }

  main {
    width: 75%;
    margin: auto;
  }

  ninja-keys:host(.dark) {
    --ninja-backdrop-filter: none;
    --ninja-overflow-background: rgba(0, 0, 0, 0.7);
    --ninja-text-color: #7d7d7d;
    --ninja-modal-background: rgba(17, 17, 17, 0.85);
    --ninja-accent-color: rgb(110, 94, 210);
    --ninja-secondary-background-color: rgba(51, 51, 51, 0.44);
    --ninja-secondary-text-color: #888;
    --ninja-selected-text-color: #eaeaea;
    --ninja-selected-background: rgba(51, 51, 51, 0.44);
    --ninja-icon-color: var(--ninja-secondary-text-color);
    --ninja-separate-border: 1px solid var(--ninja-secondary-background-color);
    --ninja-modal-shadow: 0 16px 70px rgba(0, 0, 0, 0.2);
    --ninja-group-text-color: rgb(144, 149, 157);
    --ninja-footer-background: rgba(30, 30, 30, 85%);
  }

  .fade-in {
    animation: fade-in 0.5s ease-in-out;
  }

  .fade-in-dropdown {
    animation: fade-in-dropdown 0.2s ease-in-out;
  }

  @keyframes fade-in {
    from {
      transform: translateY(-20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes fade-in-dropdown {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
</style>

<script>
  import "ninja-keys";
  const ninja = document.querySelector("ninja-keys");
  const btn = document.querySelector("#command-btn");
  btn.addEventListener("click", () => {
    ninja.open();
  });

  ninja.data = [
    {
      id: "create",
      title: "Create new link",
      handler: () => {
        window.location.assign("/create");
      },
    },
    {
      id: "dashboard",
      title: "Dashboard",
      handler: () => {
        window.location.assign("/dashboard");
      },
    },
    {
      id: "repo",
      title: "Explore the repo",
      handler: () => {
        window.location.assign("https://github.com/SantiMit1/tinyify/");
      },
    },
    {
      id: "bug",
      title: "Report a bug",
      handler: () => {
        window.location.assign(
          "https://github.com/SantiMit1/tinyify/issues/new"
        );
      },
    },
  ];
</script>

<script>
  import {
    getAuth,
    GoogleAuthProvider,
    signInWithPopup,
    inMemoryPersistence,
  } from "firebase/auth";
  import { app } from "@/firebase/client";
  import { toast } from "wc-toast";

  const auth = getAuth(app);
  auth.setPersistence(inMemoryPersistence);

  const googleSignIn = document.querySelector(
    "#google-sign-in"
  ) as HTMLButtonElement;

  if (googleSignIn) {
    googleSignIn.addEventListener("click", async () => {
      const provider = new GoogleAuthProvider();
      const userCredential = await signInWithPopup(auth, provider);
      const idToken = await userCredential.user.getIdToken();
      const res = await fetch("/api/auth/signin", {
        headers: {
          Authorization: `Bearer ${idToken}`,
        },
      });

      if (!res.ok) {
        toast("Failed to sign in", {
          icon: {
            type: "error",
          },
        });
      }

      if (res.redirected) {
        window.location.assign(res.url);
      }
    });
  }

  const googleSignOut = document.querySelector(
    "#sign-out"
  ) as HTMLButtonElement;

  if (googleSignOut) {
    googleSignOut.addEventListener("click", async () => {
      const res = await fetch("/api/auth/signout");
      if (res.redirected) {
        window.location.assign(res.url);
      }
    });
  }
</script>
